Production Grade Workflow

Development-> Testing -> Deployment

npm start -> Starts the development server.
npm run build -> Bundles the app into static files for production.
npm test -> Starts the test runner.

Make two Dockerfiles 

1. Development - Dockerfile.dev

docker build -f Dockerfile.dev .
docker run -p 3000:3000 <imageid>

Problem  : any change in source code, image has to be rebuilt
Solution : Docker Volumes ( simple terms => mapping from inside the container to outside) basically a reference to local folder.

Docker Volume commands

docker run -p 3000:3000  -v /app/node_modules 	   -v $(pwd):/app            <imageid>
			 this is bookmark only     this is actual volume

To avoid this all use docker compose

version: '3'
services:
  web:
    build:
	context: .
	dockerfile: Dockerfile.dev
    ports: 
      - "3000:3000"
    volumes: 
      - /app/node_modules
      - .:/app

2. Testing

First Approach:

docker-compose up
docker exec -it <container-id> <command> in this case npm run start

Second Approach:
Dedicated testing service for testing in docker-compose.yml

tests:
    build:
      context: .
      dockerfile: 'Dockerfile.dev'
    volumes:
      - /app/node_modules
      - .:/app
    command: ["npm","run","test"]

3. Production Phase (Deployment-I)
 
Multi-Step Docker builds
Build Phase : using the node image to execute the build and get the directory with the static assets
Run Phase: using the NGINX image to run the production build by copying the build directory.



